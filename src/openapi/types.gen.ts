// This file is auto-generated by @hey-api/openapi-ts

export type Ex3CacheDepthManagerSpotMarketDepthDataDto = {
  /**
   * Asks are sorted in ascending order by price.
   * <remarks>
   * In each list, the first element is the price and the second element is the volume.
   * </remarks>
   */
  asks: Array<Array<string>> | null;
  /**
   * Bids are sorted in descending order by price.
   * <remarks>
   * In each list, the first element is the price and the second element is the volume.
   * </remarks>
   */
  bids: Array<Array<string>> | null;
};

export type Ex3ExchangeIActorsEmptyResultBody = {
  [key: string]: never;
};

/**
 * chain information which is supported by the system
 */
export type Ex3ExchangeOpenApiAppServicesChainInfoDto = {
  /**
   * chain id
   */
  chainId: string;
  /**
   * address for user to deposit
   */
  depositAddress: string | null;
  /**
   * display name
   */
  displayName: string | null;
};

export type Ex3ExchangeOpenApiAppServicesDepthIndexEnum = 1 | 2 | 3 | 4 | 5 | 6;

export type Ex3ExchangeOpenApiAppServicesGet24HrTickerOutput = {
  items: Array<Ex3ExchangeOpenApiAppServicesMarket24HrTickerItem> | null;
};

export type Ex3ExchangeOpenApiAppServicesGetSwapOutput = {
  items?: Array<Ex3ExchangeOpenApiAppServicesGetSwapOutputItem> | null;
};

/**
 * The input for getting liquidity information.
 */
export type Ex3ExchangeOpenApiAppServicesGetSwapOutputItem = {
  /**
   * The market id for which the liquidity information is provided.
   */
  marketId?: string;
  /**
   * The total amount of liquidity in the pool.
   */
  poolAmount?: string;
  /**
   * The total volume of liquidity in the pool.
   */
  poolVolume?: string;
  /**
   * The liquidity information of the pool.
   */
  poolLiquidity?: string;
};

export type Ex3ExchangeOpenApiAppServicesKlineItem = {
  /**
   * The open price of the trading pair in the last 24 hours.
   */
  o: string;
  /**
   * The highest price of the trading pair in the last 24 hours.
   */
  h: string;
  /**
   * The lowest price of the trading pair in the last 24 hours.
   */
  l: string;
  /**
   * The close price of the trading pair in the last 24 hours.
   */
  c: string;
  /**
   * The volume of the trading pair in the last 24 hours.
   */
  v: string;
  /**
   * The amount of the trading pair in the last 24 hours.
   */
  a: string;
  /**
   * timestamp of kline
   */
  t: unknown;
};

export type Ex3ExchangeOpenApiAppServicesMarket24HrTickerItem = {
  /**
   * the market id.
   */
  id?: string;
  /**
   * The open price of the trading pair in the last 24 hours.
   */
  o?: string;
  /**
   * The highest price of the trading pair in the last 24 hours.
   */
  h?: string;
  /**
   * The lowest price of the trading pair in the last 24 hours.
   */
  l?: string;
  /**
   * The close price of the trading pair in the last 24 hours.
   */
  c?: string;
  /**
   * The volume of the trading pair in the last 24 hours.
   */
  v?: string;
  /**
   * The amount of the trading pair in the last 24 hours.
   */
  a?: string;
  /**
   * time of the ticker update.
   */
  t?: unknown;
};

export type Ex3ExchangeOpenApiAppServicesMarketInfoItem = {
  /**
   * The market id.
   */
  marketId: string;
  /**
   * Market symbol
   */
  marketSymbol: string;
  /**
   * The base asset id of the market.
   */
  baseAssetId: string;
  /**
   * The quote asset id of the market.
   */
  quoteAssetId: string;
  /**
   * values of the depth levels
   */
  depthLevels?: Array<number> | null;
};

/**
 * Represents the result of a trading history entry.
 */
export type Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem = {
  /**
   * The display information of the maker wallet. if null, means the maker is swap pool.
   */
  maker?: string | null;
  /**
   * The display information of the taker wallet.
   */
  taker?: string;
  takerSide: Ex3ModelsOrderSide;
  /**
   * The price at which the trade occurred.
   */
  p: string;
  /**
   * The volume of the trade.
   */
  v: string;
  /**
   * The total amount of the trade.
   */
  a: string;
  /**
   * The time at which the trade occurred in Unix time milliseconds.
   */
  t: unknown;
};

export type Ex3ExchangeOpenApiAppServicesNonceResult = {
  nonce?: string;
};

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1CollectionsPooledPooledList1Ex3ExchangeOpenApiAppServicesWalletOrderTradeListItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___CollectionsPooled_Version_10820_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Array<Ex3ExchangeOpenApiAppServicesWalletOrderTradeListItem> | null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3CacheDepthManagerSpotMarketDepthDataDto_Ex3CacheDepthManager_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3CacheDepthManagerSpotMarketDepthDataDto;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeIActorsEmptyResultBody_Ex3ExchangeIActorsModels_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeIActorsEmptyResultBody;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesGet24HrTickerOutput_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesGet24HrTickerOutput;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesGetSwapOutput_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesGetSwapOutput;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesMarketInfoItem;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesNonceResult_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesNonceResult;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesRootAssetInfoDto;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesSystemInfo_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesSystemInfo;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: Ex3ExchangeOpenApiAppServicesWalletOrderDto;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1SystemCollectionsGenericDictionary2Ex3ModelsAssetId_Ex3Models_Version_1000_Culture_neutral_PublicKeyToken_null__Ex3ModelsOpenApiNumber_Ex3Models_Version_1000_Culture_neutral_PublicKeyToken_null___SystemPrivateCoreLib_Version_9000_Culture_neutral_PublicKeyToken_7Cec85D7Bea7798E =
  {
    code?: number;
    message?: string | null;
    data?: {
      [key: string]: string;
    } | null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1SystemCollectionsGenericIEnumerable1Ex3ExchangeOpenApiAppServicesChainInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___SystemPrivateCoreLib_Version_9000_Culture_neutral_PublicKeyToken_7Cec85D7Bea7798E =
  {
    code?: number;
    message?: string | null;
    data?: Array<Ex3ExchangeOpenApiAppServicesChainInfoDto> | null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesKlineItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesKlineItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
  };

export type Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null =
  {
    code?: number;
    message?: string | null;
    data?: VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
  };

export type Ex3ExchangeOpenApiAppServicesRootAssetInfoDto = {
  /**
   * ID of the asset.
   */
  assetId: string;
  /**
   * ID of chain
   */
  chainId?: string;
  /**
   * Chain asset type
   */
  chainAssetType: string;
  /**
   * address of smart contract. e.g., eth address for erc20, ticker for krc20
   */
  contractAddress: string;
  /**
   * decimals
   */
  decimalPlaces: string;
  /**
   * the asset can be used only used as base token if true
   */
  isBaseToken: boolean;
  /**
   * display name
   */
  displayName: string | null;
  /**
   * symbol
   */
  assetSymbol: string;
  /**
   * sub assets
   */
  subAssets?: Array<Ex3ExchangeOpenApiAppServicesSubAssetInfoDto> | null;
};

export type Ex3ExchangeOpenApiAppServicesSubAssetInfoDto = {
  /**
   * ID of the asset.
   */
  assetId: string;
  /**
   * ID of chain
   */
  chainId?: string;
  /**
   * Chain asset type
   */
  chainAssetType: string;
  /**
   * address of smart contract. e.g., eth address for erc20, ticker for krc20
   */
  contractAddress: string;
  /**
   * decimals
   */
  decimalPlaces: string;
};

/**
 * system information
 */
export type Ex3ExchangeOpenApiAppServicesSystemInfo = {
  /**
   * the current timestamp in milliseconds since the Unix epoch.
   */
  timestamp?: number;
};

export type Ex3ExchangeOpenApiAppServicesWalletOrderDto = {
  /**
   * order id
   */
  id: string;
  /**
   * market id
   */
  mid: string;
  /**
   * The HIN (Hibit chain identity number) of the wallet
   */
  hin: string;
  cat: Ex3ModelsOrderCategory;
  s: Ex3ModelsOrderSide;
  /**
   * volume of the order filled
   */
  fv: string;
  /**
   * amount of the order filled
   */
  fa: string;
  /**
   * total volume of the order
   */
  tv: string;
  /**
   * total amount of the order
   */
  ta: string;
  /**
   * price of the order filled
   */
  fp: string;
  /**
   * price of the order placed
   */
  p: string;
  st: Ex3RepositoryHistoryEntitiesOrderStatus;
  /**
   * submitted time of the order
   */
  t: unknown;
};

export type Ex3ExchangeOpenApiAppServicesWalletOrderTradeListItem = {
  /**
   * trade id
   */
  tid: string | null;
  /**
   * filled price
   */
  fp: string;
  /**
   * filled volume
   */
  fv: string;
  /**
   * filled amount
   */
  fa: string;
  ts: Ex3ModelsOrderSide;
  /**
   * time of trade
   */
  t: unknown;
};

export type Ex3ModelsKLineTickSpace = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;

export type Ex3ModelsOrderCategory = 0 | 1;

/**
 * Order side
 */
export type Ex3ModelsOrderSide = 1 | 2;

export type Ex3RepositoryHistoryEntitiesOrderStatus = 0 | 1 | 2;

export type Ex3TransactionsL2Request = {
  type?: string;
  userId?: string;
  nonce?: string;
  message?: string;
  hash?: string;
  signature?: string;
};

export type VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesKlineItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    items?: Array<Ex3ExchangeOpenApiAppServicesKlineItem> | null;
    totalCount?: number;
  };

export type VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    items?: Array<Ex3ExchangeOpenApiAppServicesMarketInfoItem> | null;
    totalCount?: number;
  };

export type VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    items?: Array<Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem> | null;
    totalCount?: number;
  };

export type VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    items?: Array<Ex3ExchangeOpenApiAppServicesRootAssetInfoDto> | null;
    totalCount?: number;
  };

export type VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    items?: Array<Ex3ExchangeOpenApiAppServicesWalletOrderDto> | null;
    totalCount?: number;
  };

export type VoloAbpHttpRemoteServiceErrorInfo = {
  code?: string | null;
  message?: string | null;
  details?: string | null;
  data?: {} | null;
  validationErrors?: Array<VoloAbpHttpRemoteServiceValidationErrorInfo> | null;
};

export type VoloAbpHttpRemoteServiceErrorResponse = {
  error?: VoloAbpHttpRemoteServiceErrorInfo;
};

export type VoloAbpHttpRemoteServiceValidationErrorInfo = {
  message?: string | null;
  members?: Array<string> | null;
};

export type VoloAbpLocalizationLanguageInfo = {
  cultureName?: string | null;
  uiCultureName?: string | null;
  displayName?: string | null;
  readonly twoLetterISOLanguageName?: string | null;
};

export type VoloAbpNameValue = {
  name?: string | null;
  value?: string | null;
};

export type GetV1TimestampData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/timestamp';
};

export type GetV1TimestampErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1TimestampError = GetV1TimestampErrors[keyof GetV1TimestampErrors];

export type GetV1TimestampResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesSystemInfo_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1TimestampResponse = GetV1TimestampResponses[keyof GetV1TimestampResponses];

export type GetV1AssetsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * chain ids to filter the assets list.
     */
    ChainIds?: Array<string>;
    /**
     * chain asset types to filter the assets list.
     */
    ChainAssetTypes?: Array<string>;
    /**
     * maximum number of items to return. maximum value is 500.
     */
    Limit?: number;
    /**
     * number of items to skip before starting to collect the result set.
     */
    Offset?: number;
    /**
     * the sorting parameters for the list.
     *
     * see https://learn.microsoft.com/en-us/azure/search/search-query-odata-orderby#examples for the format of the OrderBy string.
     *
     *  supported sorting parameters are: "AssetId".
     *
     * default sorting is by " AssetId desc".
     */
    OrderBy?: string;
  };
  url: '/v1/assets';
};

export type GetV1AssetsErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1AssetsError = GetV1AssetsErrors[keyof GetV1AssetsErrors];

export type GetV1AssetsResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null;
};

export type GetV1AssetsResponse = GetV1AssetsResponses[keyof GetV1AssetsResponses];

export type GetV1AssetData = {
  body?: never;
  path?: never;
  query?: {
    AssetId?: string;
  };
  url: '/v1/asset';
};

export type GetV1AssetErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1AssetError = GetV1AssetErrors[keyof GetV1AssetErrors];

export type GetV1AssetResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesRootAssetInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1AssetResponse = GetV1AssetResponses[keyof GetV1AssetResponses];

export type GetV1ChainsData = {
  body?: never;
  path?: never;
  query?: never;
  url: '/v1/chains';
};

export type GetV1ChainsErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1ChainsError = GetV1ChainsErrors[keyof GetV1ChainsErrors];

export type GetV1ChainsResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1SystemCollectionsGenericIEnumerable1Ex3ExchangeOpenApiAppServicesChainInfoDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___SystemPrivateCoreLib_Version_9000_Culture_neutral_PublicKeyToken_7Cec85D7Bea7798E;
};

export type GetV1ChainsResponse = GetV1ChainsResponses[keyof GetV1ChainsResponses];

export type GetV1MarketDepthData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The index of the depth.
     * for example, if depth levels of market is 0.01, 0.1, 1, 10, 50, 100.
     * then the index of 0.01 is 1, 0.1 is 2, 1 is 3, 10 is 4, 50 is 5, 100 is 6.
     */
    Index?: Ex3ExchangeOpenApiAppServicesDepthIndexEnum;
    /**
     * The market id.
     */
    MarketId?: string;
    /**
     * limit of the depth.
     * <remarks> Range from 1 to 100. </remarks>
     */
    Limit?: number;
  };
  url: '/v1/market/depth';
};

export type GetV1MarketDepthErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketDepthError = GetV1MarketDepthErrors[keyof GetV1MarketDepthErrors];

export type GetV1MarketDepthResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3CacheDepthManagerSpotMarketDepthDataDto_Ex3CacheDepthManager_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketDepthResponse = GetV1MarketDepthResponses[keyof GetV1MarketDepthResponses];

export type GetV1MarketsSwapData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The market id. This is an optional field that specifies the market for which liquidity information is requested.
     */
    MarketId?: string;
  };
  url: '/v1/markets/swap';
};

export type GetV1MarketsSwapErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketsSwapError = GetV1MarketsSwapErrors[keyof GetV1MarketsSwapErrors];

export type GetV1MarketsSwapResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesGetSwapOutput_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketsSwapResponse = GetV1MarketsSwapResponses[keyof GetV1MarketsSwapResponses];

export type GetV1MarketsTickerData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The market id.
     */
    MarketId?: string;
  };
  url: '/v1/markets/ticker';
};

export type GetV1MarketsTickerErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketsTickerError = GetV1MarketsTickerErrors[keyof GetV1MarketsTickerErrors];

export type GetV1MarketsTickerResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesGet24HrTickerOutput_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketsTickerResponse = GetV1MarketsTickerResponses[keyof GetV1MarketsTickerResponses];

export type GetV1MarketKlineData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The market id.
     */
    MarketId: string;
    /**
     * The start time of the kline ticks.
     */
    TickSpace: Ex3ModelsKLineTickSpace;
    /**
     * maximum number of items to return. maximum value is 500.
     */
    Limit?: number;
    /**
     * number of items to skip before starting to collect the result set.
     */
    Offset?: number;
    /**
     * the sorting parameters for the list.
     *
     * see https://learn.microsoft.com/en-us/azure/search/search-query-odata-orderby#examples for the format of the OrderBy string.
     *
     *  supported sorting parameters are: "Timestamp".
     *
     * default sorting is by " Timestamp desc".
     */
    OrderBy?: string;
  };
  url: '/v1/market/kline';
};

export type GetV1MarketKlineErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketKlineError = GetV1MarketKlineErrors[keyof GetV1MarketKlineErrors];

export type GetV1MarketKlineResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesKlineItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketKlineResponse = GetV1MarketKlineResponses[keyof GetV1MarketKlineResponses];

export type GetV1MarketTradeData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The market id for which the trade list is requested.
     */
    MarketId: string;
    /**
     * The start date and time for the trade list.
     */
    TradedAtStart?: number;
    /**
     * The end date and time for the trade list.
     */
    TradedAtEnd?: number;
    /**
     * maximum number of items to return. maximum value is 500.
     */
    Limit?: number;
    /**
     * number of items to skip before starting to collect the result set.
     */
    Offset?: number;
    /**
     * the sorting parameters for the list.
     *
     * see https://learn.microsoft.com/en-us/azure/search/search-query-odata-orderby#examples for the format of the OrderBy string.
     *
     *  supported sorting parameters are: "TradedAt".
     *
     * default sorting is by " TradedAt desc".
     */
    OrderBy?: string;
  };
  url: '/v1/market/trade';
};

export type GetV1MarketTradeErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketTradeError = GetV1MarketTradeErrors[keyof GetV1MarketTradeErrors];

export type GetV1MarketTradeResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketTradingHistoryItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketTradeResponse = GetV1MarketTradeResponses[keyof GetV1MarketTradeResponses];

export type GetV1MarketsData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * chain ids to filter the markets list.
     */
    ChainIds?: Array<string>;
    /**
     * chain asset types to filter the markets list.
     */
    ChainAssetTypes?: Array<string>;
    /**
     * The base asset id. This is an optional field that specifies the base asset for which the market list is requested.
     */
    BaseAssetId?: string;
    /**
     * The quote asset id. This is an optional field that specifies the quote asset for which the market list is requested.
     */
    QuoteAssetId?: string;
    /**
     * maximum number of items to return. maximum value is 500.
     */
    Limit?: number;
    /**
     * number of items to skip before starting to collect the result set.
     */
    Offset?: number;
    /**
     * the sorting parameters for the list.
     *
     * see https://learn.microsoft.com/en-us/azure/search/search-query-odata-orderby#examples for the format of the OrderBy string.
     *
     *  supported sorting parameters are: "MarketId".
     *
     * default sorting is by " MarketId desc".
     */
    OrderBy?: string;
  };
  url: '/v1/markets';
};

export type GetV1MarketsErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketsError = GetV1MarketsErrors[keyof GetV1MarketsErrors];

export type GetV1MarketsResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketsResponse = GetV1MarketsResponses[keyof GetV1MarketsResponses];

export type GetV1MarketData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The market id.
     */
    MarketId?: string;
  };
  url: '/v1/market';
};

export type GetV1MarketErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1MarketError = GetV1MarketErrors[keyof GetV1MarketErrors];

export type GetV1MarketResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesMarketInfoItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1MarketResponse = GetV1MarketResponses[keyof GetV1MarketResponses];

export type GetV1OrderTradesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * order id
     */
    OrderId?: string;
  };
  url: '/v1/order/trades';
};

export type GetV1OrderTradesErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1OrderTradesError = GetV1OrderTradesErrors[keyof GetV1OrderTradesErrors];

export type GetV1OrderTradesResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1CollectionsPooledPooledList1Ex3ExchangeOpenApiAppServicesWalletOrderTradeListItem_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___CollectionsPooled_Version_10820_Culture_neutral_PublicKeyToken_null;
};

export type GetV1OrderTradesResponse = GetV1OrderTradesResponses[keyof GetV1OrderTradesResponses];

export type GetV1OrdersData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * HIN (hibit chain identity number)
     */
    HIN?: string;
    /**
     * status to filter the orders, if null, means all statuses.
     */
    Status?: Array<Ex3RepositoryHistoryEntitiesOrderStatus>;
    /**
     * marketId, if null, means all markets
     */
    MarketId?: string;
    /**
     * order ids, if null, means not filter by order ids.
     * Max length is 20, if more than 20, return error.
     */
    OrderIds?: Array<string>;
    /**
     * order category, if null, means all categories.
     */
    OrderCategory?: Ex3ModelsOrderCategory;
    /**
     * order side, if null, means all sides.
     */
    OrderSide?: Ex3ModelsOrderSide;
    /**
     * order created at after this time
     */
    CreatedAtStart?: number;
    /**
     * order created at before this time
     */
    CreatedAtEnd?: number;
    /**
     * maximum number of items to return. maximum value is 500.
     */
    Limit?: number;
    /**
     * number of items to skip before starting to collect the result set.
     */
    Offset?: number;
    /**
     * the sorting parameters for the list.
     *
     * see https://learn.microsoft.com/en-us/azure/search/search-query-odata-orderby#examples for the format of the OrderBy string.
     *
     *  supported sorting parameters are: "CreatedAt".
     *
     * default sorting is by " CreatedAt desc".
     */
    OrderBy?: string;
  };
  url: '/v1/orders';
};

export type GetV1OrdersErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1OrdersError = GetV1OrdersErrors[keyof GetV1OrdersErrors];

export type GetV1OrdersResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1VoloAbpApplicationDtosPagedResultDto1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null___VoloAbpDddApplicationContracts_Version_9100_Culture_neutral_PublicKeyToken_null;
};

export type GetV1OrdersResponse = GetV1OrdersResponses[keyof GetV1OrdersResponses];

export type GetV1OrderData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * order id
     */
    OrderId?: string;
  };
  url: '/v1/order';
};

export type GetV1OrderErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1OrderError = GetV1OrderErrors[keyof GetV1OrderErrors];

export type GetV1OrderResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesWalletOrderDto_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1OrderResponse = GetV1OrderResponses[keyof GetV1OrderResponses];

export type PostV1TxSubmitSpotOrderData = {
  body?: Ex3TransactionsL2Request;
  path?: never;
  query?: never;
  url: '/v1/tx/submit-spot-order';
};

export type PostV1TxSubmitSpotOrderErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type PostV1TxSubmitSpotOrderError = PostV1TxSubmitSpotOrderErrors[keyof PostV1TxSubmitSpotOrderErrors];

export type PostV1TxSubmitSpotOrderResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeIActorsEmptyResultBody_Ex3ExchangeIActorsModels_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type PostV1TxSubmitSpotOrderResponse = PostV1TxSubmitSpotOrderResponses[keyof PostV1TxSubmitSpotOrderResponses];

export type PostV1TxCancelSpotOrderData = {
  body?: Ex3TransactionsL2Request;
  path?: never;
  query?: never;
  url: '/v1/tx/cancel-spot-order';
};

export type PostV1TxCancelSpotOrderErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type PostV1TxCancelSpotOrderError = PostV1TxCancelSpotOrderErrors[keyof PostV1TxCancelSpotOrderErrors];

export type PostV1TxCancelSpotOrderResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeIActorsEmptyResultBody_Ex3ExchangeIActorsModels_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type PostV1TxCancelSpotOrderResponse = PostV1TxCancelSpotOrderResponses[keyof PostV1TxCancelSpotOrderResponses];

export type GetV1WalletNonceData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * HIN, hibit chain identity number
     */
    HIN?: string;
  };
  url: '/v1/wallet/nonce';
};

export type GetV1WalletNonceErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1WalletNonceError = GetV1WalletNonceErrors[keyof GetV1WalletNonceErrors];

export type GetV1WalletNonceResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1Ex3ExchangeOpenApiAppServicesNonceResult_Ex3ExchangeOpenApiAppServices_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1WalletNonceResponse = GetV1WalletNonceResponses[keyof GetV1WalletNonceResponses];

export type GetV1WalletBalancesData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * HIN, hibit chain identity number
     */
    HIN?: string;
    /**
     * Asset Id (optional), if not provided, return all assets
     */
    AssetId?: string;
  };
  url: '/v1/wallet/balances';
};

export type GetV1WalletBalancesErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1WalletBalancesError = GetV1WalletBalancesErrors[keyof GetV1WalletBalancesErrors];

export type GetV1WalletBalancesResponses = {
  /**
   * OK
   */
  200: Ex3ExchangeOpenApiAppServicesOpenApiResult1SystemCollectionsGenericDictionary2Ex3ModelsAssetId_Ex3Models_Version_1000_Culture_neutral_PublicKeyToken_null__Ex3ModelsOpenApiNumber_Ex3Models_Version_1000_Culture_neutral_PublicKeyToken_null___SystemPrivateCoreLib_Version_9000_Culture_neutral_PublicKeyToken_7Cec85D7Bea7798E;
};

export type GetV1WalletBalancesResponse = GetV1WalletBalancesResponses[keyof GetV1WalletBalancesResponses];

export type ClientOptions = {
  baseUrl: `${string}://openapiv1.json` | (string & {});
};
