// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type {
  GetV1PaymentAddressData,
  GetV1PaymentAddressResponse,
  GetV1PaymentAddressError,
  GetV1QuoteData,
  GetV1QuoteResponse,
  GetV1QuoteError,
  GetV1OrderData,
  GetV1OrderResponse,
  GetV1OrderError,
  PostV1SwapData,
  PostV1SwapResponse,
  PostV1SwapError
} from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get the payment address
 */
export const getV1PaymentAddress = <ThrowOnError extends boolean = false>(
  options?: Options<GetV1PaymentAddressData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetV1PaymentAddressResponse, GetV1PaymentAddressError, ThrowOnError>({
    url: '/v1/payment-address',
    ...options
  });
};

/**
 * Quote exchange rate
 * Quotes the exchange rate between two assets.
 */
export const getV1Quote = <ThrowOnError extends boolean = false>(options?: Options<GetV1QuoteData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetV1QuoteResponse, GetV1QuoteError, ThrowOnError>({
    url: '/v1/quote',
    ...options
  });
};

/**
 * Get order status
 */
export const getV1Order = <ThrowOnError extends boolean = false>(options?: Options<GetV1OrderData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).get<GetV1OrderResponse, GetV1OrderError, ThrowOnError>({
    url: '/v1/order',
    ...options
  });
};

/**
 * Swap
 * Submits a swap request between two assets.
 */
export const postV1Swap = <ThrowOnError extends boolean = false>(options?: Options<PostV1SwapData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostV1SwapResponse, PostV1SwapError, ThrowOnError>({
    url: '/v1/swap',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers
    }
  });
};
