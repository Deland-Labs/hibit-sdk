// This file is auto-generated by @hey-api/openapi-ts

export type Ex3BrokerApiAppServicesDtosGetFundReceiverOutput = {
  /**
   * The blockchain address where funds should be sent.
   */
  address?: string;
};

export type Ex3BrokerApiAppServicesDtosGetOrderOutput = {
  status: Ex3BrokerRepositoryEntitiesAgentOrderStatus;
  /**
   * The transaction hash for the order execution.
   */
  orderExecutionTxHash?: string | null;
  /**
   * The transaction hash for the payback operation, if applicable.
   */
  refundTxHash?: string | null;
  /**
   * The amount paid back in the payback transaction.
   */
  refundAmount?: string | null;
  /**
   * The asset address for the payback transaction.
   */
  refundAsset?: string | null;
  /**
   * The transaction hash for the transfer operation.
   */
  transferredTxHash?: string | null;
  /**
   * The amount transferred to the user on successful transaction.
   */
  transferredAmount?: string | null;
  /**
   * The asset address for the successful transaction.
   */
  transferredAsset?: string | null;
};

export type Ex3BrokerApiAppServicesDtosQuoteResult = {
  /**
   * The blockchain where the target asset resides (e.g., Ethereum, Bitcoin).
   */
  targetChainId?: string;
  /**
   * The gross amount of the target asset to be received before fees are deducted.
   */
  targetVolume?: string;
  /**
   * The net amount of target asset the user will actually receive after all fees.
   * Calculated as: TargetVolume - GasFee - BrokerFee
   */
  receiveVolume?: string;
  /**
   * Network transaction fee required for the operation, denominated in the target asset.
   */
  gasFee?: string;
  /**
   * Service fee charged by the broker for facilitating the swap/transfer, denominated in the target asset.
   */
  brokerFee?: string;
  /**
   * The percentage rate used to calculate the broker fee (as a decimal, e.g., 0.01 for 1%).
   */
  brokerFeeRate?: number;
  /**
   * The effect this transaction would have on the market price, expressed as a percentage (decimal).
   * Higher values indicate the transaction may significantly affect the market price.
   */
  priceImpact?: number;
  /**
   * Maximum allowed price movement (as a decimal) between quote and execution.
   * Helps protect against price volatility during transaction processing.
   */
  slippage?: number;
  /**
   * The equivalent value of the TargetVolume converted to USD for comparison purposes.
   */
  targetVolumeInUsd?: number;
};

export type Ex3BrokerApiAppServicesDtosSwapInput = {
  /**
   * The HIN of the agent that initiated the swap operation.
   */
  hin?: string;
  /**
   * The public key of the wallet that initiated the swap operation.
   */
  sourceWalletPublicKey?: string | null;
  /**
   * The address of the wallet that initiated the swap operation.
   */
  sourceWalletAddress?: string;
  /**
   * A unique identifier for the fund transfer tx.
   * For example, the hash of the transaction on the source blockchain.
   */
  txRef: string | null;
  /**
   * The blockchain where the source asset currently resides
   */
  sourceChainId?: string;
  /**
   * The type of the source asset (Native, SPL, ERC20, KRC20 etc.).
   * Determines how the asset is identified and processed.
   */
  sourceAssetType?: string;
  /**
   * The identifier for the source asset - either a contract address for tokens or a ticker symbol.
   * Should be null when SourceAssetType is Native (e.g., BTC, ETH, KAS).
   */
  sourceAsset?: string | null;
  /**
   * The amount of source asset to be exchanged/transferred, expressed in the smallest unit
   * of the asset (e.g., satoshi for Bitcoin, wei for Ethereum).
   */
  sourceVolume?: string;
  /**
   * The destination blockchain for the exchange operation.
   * When null, the system will use the same chain as the source (intra-chain operation).
   */
  targetChainId?: string | null;
  /**
   * The destination wallet address where the target assets will be sent.
   * When null, the system will use the source wallet address as the destination.
   */
  targetWalletAddress?: string | null;
  /**
   * The type of the target asset to receive.
   * When null, the system will use the same asset type as the source.
   */
  targetAssetType?: string | null;
  /**
   * The identifier for the target asset - either a contract address for tokens or a ticker symbol.
   * Should be null when TargetAssetType is Native (e.g., BTC, ETH, KAS).
   */
  targetAsset?: string | null;
  /**
   * The amount of target asset to be received, expressed in the smallest unit
   */
  targetVolume?: string;
  /**
   * The minimum amount of target asset to be received, expressed in the smallest unit
   */
  targetVolumeMin?: string;
  signatureSchema?: Ex3ModelsWalletSignatureSchema;
  /**
   * The signature of the swap operation.
   */
  signature?: string;
};

/**
 * The output of the swap operation.
 */
export type Ex3BrokerApiAppServicesDtosSwapOutput = {
  /**
   * A unique identifier for the agent that initiated the swap operation.
   */
  agentOrderId?: string | null;
};

/**
 * result of open api
 */
export type Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosGetFundReceiverOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    /**
     * code of the result, 200 for success, 400 for bad request
     */
    code?: number;
    /**
     * message of the result for details
     */
    message?: string | null;
    data?: Ex3BrokerApiAppServicesDtosGetFundReceiverOutput;
  };

/**
 * result of open api
 */
export type Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosGetOrderOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    /**
     * code of the result, 200 for success, 400 for bad request
     */
    code?: number;
    /**
     * message of the result for details
     */
    message?: string | null;
    data?: Ex3BrokerApiAppServicesDtosGetOrderOutput;
  };

/**
 * result of open api
 */
export type Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosQuoteResult_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    /**
     * code of the result, 200 for success, 400 for bad request
     */
    code?: number;
    /**
     * message of the result for details
     */
    message?: string | null;
    data?: Ex3BrokerApiAppServicesDtosQuoteResult;
  };

/**
 * result of open api
 */
export type Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosSwapOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null =
  {
    /**
     * code of the result, 200 for success, 400 for bad request
     */
    code?: number;
    /**
     * message of the result for details
     */
    message?: string | null;
    data?: Ex3BrokerApiAppServicesDtosSwapOutput;
  };

export type Ex3BrokerRepositoryEntitiesAgentOrderStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;

/**
 * Represents the schema of a wallet signature.
 */
export type Ex3ModelsWalletSignatureSchema = 1000 | 1001 | 1002 | 2000 | 2010 | 2020 | 3000 | 3010;

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationAuthConfigurationDto = {
  grantedPolicies?: {
    [key: string]: boolean;
  } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationConfigurationDto = {
  localization?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto;
  auth?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationAuthConfigurationDto;
  setting?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationSettingConfigurationDto;
  currentUser?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentUserDto;
  features?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationFeatureConfigurationDto;
  globalFeatures?: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationGlobalFeatureConfigurationDto;
  multiTenancy?: VoloAbpAspNetCoreMvcMultiTenancyMultiTenancyInfoDto;
  currentTenant?: VoloAbpAspNetCoreMvcMultiTenancyCurrentTenantDto;
  timing?: VoloAbpAspNetCoreMvcApplicationConfigurationsTimingDto;
  clock?: VoloAbpAspNetCoreMvcApplicationConfigurationsClockDto;
  objectExtensions?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingObjectExtensionsDto;
  extraProperties?: {} | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationFeatureConfigurationDto = {
  values?: {
    [key: string]: string | null;
  } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationGlobalFeatureConfigurationDto = {
  enabledFeatures?: Array<string> | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationConfigurationDto = {
  values?: {
    [key: string]: {
      [key: string]: string;
    };
  } | null;
  resources?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto;
  } | null;
  languages?: Array<VoloAbpLocalizationLanguageInfo> | null;
  currentCulture?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto;
  defaultResourceName?: string | null;
  languagesMap?: {
    [key: string]: Array<VoloAbpNameValue>;
  } | null;
  languageFilesMap?: {
    [key: string]: Array<VoloAbpNameValue>;
  } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationDto = {
  resources?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto;
  } | null;
  currentCulture?: VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationLocalizationResourceDto = {
  texts?: {
    [key: string]: string;
  } | null;
  baseResources?: Array<string> | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsApplicationSettingConfigurationDto = {
  values?: {
    [key: string]: string | null;
  } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsClockDto = {
  kind?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentCultureDto = {
  displayName?: string | null;
  englishName?: string | null;
  threeLetterIsoLanguageName?: string | null;
  twoLetterIsoLanguageName?: string | null;
  isRightToLeft?: boolean;
  cultureName?: string | null;
  name?: string | null;
  nativeName?: string | null;
  dateTimeFormat?: VoloAbpAspNetCoreMvcApplicationConfigurationsDateTimeFormatDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsCurrentUserDto = {
  isAuthenticated?: boolean;
  id?: string | null;
  tenantId?: string | null;
  impersonatorUserId?: string | null;
  impersonatorTenantId?: string | null;
  impersonatorUserName?: string | null;
  impersonatorTenantName?: string | null;
  userName?: string | null;
  name?: string | null;
  surName?: string | null;
  email?: string | null;
  emailVerified?: boolean;
  phoneNumber?: string | null;
  phoneNumberVerified?: boolean;
  roles?: Array<string> | null;
  sessionId?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsDateTimeFormatDto = {
  calendarAlgorithmType?: string | null;
  dateTimeFormatLong?: string | null;
  shortDatePattern?: string | null;
  fullDateTimePattern?: string | null;
  dateSeparator?: string | null;
  shortTimePattern?: string | null;
  longTimePattern?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsIanaTimeZone = {
  timeZoneName?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingEntityExtensionDto = {
  properties?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto;
  } | null;
  configuration?: {} | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumDto = {
  fields?: Array<VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumFieldDto> | null;
  localizationResource?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumFieldDto = {
  name?: string | null;
  value?: unknown;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiCreateDto = {
  isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto = {
  onGet?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiGetDto;
  onCreate?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiCreateDto;
  onUpdate?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiUpdateDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiGetDto = {
  isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiUpdateDto = {
  isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto = {
  typeSimple?: string | null;
  config?: {} | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyDto = {
  type?: string | null;
  typeSimple?: string | null;
  displayName?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto;
  api?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyApiDto;
  ui?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto;
  policy?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPolicyDto;
  attributes?: Array<VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyAttributeDto> | null;
  configuration?: {} | null;
  defaultValue?: unknown;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyFeaturePolicyDto = {
  features?: Array<string> | null;
  requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyGlobalFeaturePolicyDto = {
  features?: Array<string> | null;
  requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPermissionPolicyDto = {
  permissionNames?: Array<string> | null;
  requiresAll?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPolicyDto = {
  globalFeatures?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyGlobalFeaturePolicyDto;
  features?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyFeaturePolicyDto;
  permissions?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyPermissionPolicyDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiDto = {
  onTable?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiTableDto;
  onCreateForm?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto;
  onEditForm?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto;
  lookup?: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiLookupDto;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiFormDto = {
  isVisible?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiLookupDto = {
  url?: string | null;
  resultListPropertyName?: string | null;
  displayPropertyName?: string | null;
  valuePropertyName?: string | null;
  filterParamName?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionPropertyUiTableDto = {
  isVisible?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingLocalizableStringDto = {
  name?: string | null;
  resource?: string | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingModuleExtensionDto = {
  entities?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingEntityExtensionDto;
  } | null;
  configuration?: {} | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingObjectExtensionsDto = {
  modules?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingModuleExtensionDto;
  } | null;
  enums?: {
    [key: string]: VoloAbpAspNetCoreMvcApplicationConfigurationsObjectExtendingExtensionEnumDto;
  } | null;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone = {
  iana?: VoloAbpAspNetCoreMvcApplicationConfigurationsIanaTimeZone;
  windows?: VoloAbpAspNetCoreMvcApplicationConfigurationsWindowsTimeZone;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsTimingDto = {
  timeZone?: VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsWindowsTimeZone = {
  timeZoneId?: string | null;
};

export type VoloAbpAspNetCoreMvcMultiTenancyCurrentTenantDto = {
  id?: string | null;
  name?: string | null;
  isAvailable?: boolean;
};

export type VoloAbpAspNetCoreMvcMultiTenancyMultiTenancyInfoDto = {
  isEnabled?: boolean;
};

export type VoloAbpHttpModelingActionApiDescriptionModel = {
  uniqueName?: string | null;
  name?: string | null;
  httpMethod?: string | null;
  url?: string | null;
  supportedVersions?: Array<string> | null;
  parametersOnMethod?: Array<VoloAbpHttpModelingMethodParameterApiDescriptionModel> | null;
  parameters?: Array<VoloAbpHttpModelingParameterApiDescriptionModel> | null;
  returnValue?: VoloAbpHttpModelingReturnValueApiDescriptionModel;
  allowAnonymous?: boolean | null;
  implementFrom?: string | null;
};

export type VoloAbpHttpModelingApplicationApiDescriptionModel = {
  modules?: {
    [key: string]: VoloAbpHttpModelingModuleApiDescriptionModel;
  } | null;
  types?: {
    [key: string]: VoloAbpHttpModelingTypeApiDescriptionModel;
  } | null;
};

export type VoloAbpHttpModelingControllerApiDescriptionModel = {
  controllerName?: string | null;
  controllerGroupName?: string | null;
  isRemoteService?: boolean;
  isIntegrationService?: boolean;
  apiVersion?: string | null;
  type?: string | null;
  interfaces?: Array<VoloAbpHttpModelingControllerInterfaceApiDescriptionModel> | null;
  actions?: {
    [key: string]: VoloAbpHttpModelingActionApiDescriptionModel;
  } | null;
};

export type VoloAbpHttpModelingControllerInterfaceApiDescriptionModel = {
  type?: string | null;
  name?: string | null;
  methods?: Array<VoloAbpHttpModelingInterfaceMethodApiDescriptionModel> | null;
};

export type VoloAbpHttpModelingInterfaceMethodApiDescriptionModel = {
  name?: string | null;
  parametersOnMethod?: Array<VoloAbpHttpModelingMethodParameterApiDescriptionModel> | null;
  returnValue?: VoloAbpHttpModelingReturnValueApiDescriptionModel;
};

export type VoloAbpHttpModelingMethodParameterApiDescriptionModel = {
  name?: string | null;
  typeAsString?: string | null;
  type?: string | null;
  typeSimple?: string | null;
  isOptional?: boolean;
  defaultValue?: unknown;
};

export type VoloAbpHttpModelingModuleApiDescriptionModel = {
  rootPath?: string | null;
  remoteServiceName?: string | null;
  controllers?: {
    [key: string]: VoloAbpHttpModelingControllerApiDescriptionModel;
  } | null;
};

export type VoloAbpHttpModelingParameterApiDescriptionModel = {
  nameOnMethod?: string | null;
  name?: string | null;
  jsonName?: string | null;
  type?: string | null;
  typeSimple?: string | null;
  isOptional?: boolean;
  defaultValue?: unknown;
  constraintTypes?: Array<string> | null;
  bindingSourceId?: string | null;
  descriptorName?: string | null;
};

export type VoloAbpHttpModelingPropertyApiDescriptionModel = {
  name?: string | null;
  jsonName?: string | null;
  type?: string | null;
  typeSimple?: string | null;
  isRequired?: boolean;
  minLength?: number | null;
  maxLength?: number | null;
  minimum?: string | null;
  maximum?: string | null;
  regex?: string | null;
};

export type VoloAbpHttpModelingReturnValueApiDescriptionModel = {
  type?: string | null;
  typeSimple?: string | null;
};

export type VoloAbpHttpModelingTypeApiDescriptionModel = {
  baseType?: string | null;
  isEnum?: boolean;
  enumNames?: Array<string> | null;
  enumValues?: Array<unknown> | null;
  genericArguments?: Array<string> | null;
  properties?: Array<VoloAbpHttpModelingPropertyApiDescriptionModel> | null;
};

export type VoloAbpHttpRemoteServiceErrorInfo = {
  code?: string | null;
  message?: string | null;
  details?: string | null;
  data?: {} | null;
  validationErrors?: Array<VoloAbpHttpRemoteServiceValidationErrorInfo> | null;
};

export type VoloAbpHttpRemoteServiceErrorResponse = {
  error?: VoloAbpHttpRemoteServiceErrorInfo;
};

export type VoloAbpHttpRemoteServiceValidationErrorInfo = {
  message?: string | null;
  members?: Array<string> | null;
};

export type VoloAbpLocalizationLanguageInfo = {
  cultureName?: string | null;
  uiCultureName?: string | null;
  displayName?: string | null;
  readonly twoLetterISOLanguageName?: string | null;
};

export type VoloAbpNameValue = {
  name?: string | null;
  value?: string | null;
};

export type GetV1PaymentAddressData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The HIN of the broker agent.
     */
    HIN?: string;
    /**
     * The chain of the payment address.
     */
    ChainId?: string;
  };
  url: '/v1/payment-address';
};

export type GetV1PaymentAddressErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1PaymentAddressError = GetV1PaymentAddressErrors[keyof GetV1PaymentAddressErrors];

export type GetV1PaymentAddressResponses = {
  /**
   * OK
   */
  200: Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosGetFundReceiverOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1PaymentAddressResponse = GetV1PaymentAddressResponses[keyof GetV1PaymentAddressResponses];

export type GetV1QuoteData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The blockchain where the source asset currently resides (e.g., Bitcoin, Ethereum, Kaspa).
     */
    SourceChainId?: string;
    /**
     * The type of the source asset (Native, SPL, ERC20, KRC20 etc.).
     * Determines how the asset is identified and processed.
     */
    SourceAssetType?: string;
    /**
     * The identifier for the source asset - either a contract address for tokens or a ticker symbol.
     * Should be null when SourceAssetType is Native (e.g., BTC, ETH, KAS).
     */
    SourceAsset?: string;
    /**
     * The amount of source asset to be exchanged/transferred, expressed in the smallest unit
     * of the asset (e.g., satoshi for Bitcoin, wei for Ethereum).
     */
    SourceVolume?: string;
    /**
     * The destination blockchain for the exchange operation.
     * When null, the system will use the same chain as the source (intra-chain operation).
     */
    TargetChainId?: string;
    /**
     * The type of the target asset to receive.
     * When null, the system will use the same asset type as the source.
     */
    TargetAssetType?: string;
    /**
     * The identifier for the target asset - either a contract address for tokens or a ticker symbol.
     * Should be null when TargetAssetType is Native (e.g., BTC, ETH, KAS).
     */
    TargetAsset?: string;
  };
  url: '/v1/quote';
};

export type GetV1QuoteErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1QuoteError = GetV1QuoteErrors[keyof GetV1QuoteErrors];

export type GetV1QuoteResponses = {
  /**
   * OK
   */
  200: Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosQuoteResult_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1QuoteResponse = GetV1QuoteResponses[keyof GetV1QuoteResponses];

export type GetV1OrderData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Agent order id
     */
    AgentOrderId?: string;
  };
  url: '/v1/order';
};

export type GetV1OrderErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type GetV1OrderError = GetV1OrderErrors[keyof GetV1OrderErrors];

export type GetV1OrderResponses = {
  /**
   * OK
   */
  200: Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosGetOrderOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type GetV1OrderResponse = GetV1OrderResponses[keyof GetV1OrderResponses];

export type PostV1SwapData = {
  body?: Ex3BrokerApiAppServicesDtosSwapInput;
  path?: never;
  query?: never;
  url: '/v1/swap';
};

export type PostV1SwapErrors = {
  /**
   * Bad Request
   */
  400: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Unauthorized
   */
  401: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Forbidden
   */
  403: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Found
   */
  404: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Internal Server Error
   */
  500: VoloAbpHttpRemoteServiceErrorResponse;
  /**
   * Not Implemented
   */
  501: VoloAbpHttpRemoteServiceErrorResponse;
};

export type PostV1SwapError = PostV1SwapErrors[keyof PostV1SwapErrors];

export type PostV1SwapResponses = {
  /**
   * OK
   */
  200: Ex3BrokerApiOpenApiResult1Ex3BrokerApiAppServicesDtosSwapOutput_Ex3BrokerApi_Version_1000_Culture_neutral_PublicKeyToken_null;
};

export type PostV1SwapResponse = PostV1SwapResponses[keyof PostV1SwapResponses];

export type ClientOptions = {
  baseUrl: 'https://testnetbrokerapi.hibit.app' | 'https://brokerapi.hibit.app' | (string & {});
};
